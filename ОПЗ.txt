#include <iostream>
#include <Windows.h>
#include <conio.h>
#include <ctime>
using namespace std;
struct Stack
{
	char sym;
	double info;
	Stack* next;
};

void RPN_Input(char* str);
double RPN_TransCalculation(char* str, char* rez, Stack* top, Stack* &top2);

Stack* Add(Stack* top, char sign)
{
	Stack* t = new Stack;
	t->sym = sign;
	t->next = top;
	return t;
}
Stack* Add(Stack* top, double var)
{
	Stack* t = new Stack;
	t->info = var;
	t->next = top;
	return t;
}
char OutTop(Stack** top)
{
	Stack* t = *top;
	char buff = t->sym;
	(*top) = (*top)->next;
	delete t;
	return buff;
}

char InputSym(char* str, int& j, char sym, char prev)
{
	str[j++] = sym;
	cout << sym;
	return prev;
}
int Prior(char sign)
{
	if (sign == '^') return 3;
	else if (sign == '*' or sign == '/') return 2;
		else if (sign == '+' or sign == '-') return 1;
			else return 0;
}
double FindVar(char s, bool arrB[], double arrV[])
{
	if (s >= 'a' and s <= 'z')
	{
		if (!arrB[int(s) - 97])
		{
			cout << "Введите значение " << s << ": ";
			cin >> arrV[int(s) - 97];
			arrB[int(s) - 97] = true;
		}
		return arrV[int(s) - 97];
	}
	else return s - '0';

}
void SignOperation(char* rez, int& j, Stack* &top, Stack* &top2)
{
	rez[j++] = OutTop(&top);
	switch (rez[j - 1])
	{
	case '+':
		top2->next->info += top2->info;
		break;
	case '-':
		top2->next->info -= top2->info;
		break;
	case '*':
		top2->next->info *= top2->info;
		break;
	case '/':
		top2->next->info /= top2->info;
		break;
	case '^':
		top2->next->info = pow(top2->next->info, top2->info);
		break;
	}
	OutTop(&top2);
}
void main()
{
	setlocale(LC_ALL, "rus");
	Stack* top{}, * top2{};
	char str[1000] = "", rez[1000] = "";
	cout << "Введите строку примера: ";
	RPN_Input(str);
	double result = RPN_TransCalculation(str, rez, top, top2);
	cout << "Обратная польская запись: " << rez << endl;
	cout << "Результат вычислений: " << result << endl;
	OutTop(&top2);
	system("pause");
}


void RPN_Input(char* str)
{
	char s;
	int j = 0, bracket = 0;
	char prev = '_';
	bool o_br = false;
	while (true)
	{
		s = _getch();
		if (s == 13)
		{
			if (j == 0 or bracket != 0 or prev == '+')
			{
				cout << "\nВы не закрыли пример, найдите ошибку!\n";
				Sleep(1500);
				system("cls");
				cout << "Введите строку примера: ";
				cout << str;
				continue;
			}
			else break;
		}
		if (j != 0 and s == 8)
		{
			if (str[j - 1] == ')')
			{
				bracket++;
				o_br = true;
			}
			else if (str[j - 1] == '(')
			{
				bracket--;
				o_br = false;
			}
			if (j == 1) prev = '_';
			else if ((str[j - 2] >= 'a' and str[j - 2] <= 'z') or (str[j - 2] >= '0' and str[j - 2] <= '9')) prev = 'v';
				else if (str[j - 2] == '(') prev = '(';
					else if (str[j - 2] == ')') prev = ')';
						else prev = '+';
			str[--j] = '\0';
			cout << "\b \b";
			continue;
		}
		if ((s >= 'a' and s <= 'z') or (s >= '0' and s <= '9'))
		{
			if (prev == '_' or prev == '(' or prev == '+')
			{
				prev = InputSym(str, j, s, 'v');
				continue;
			}
		}
		if (s == '*' or s == '/' or s == '+' or s == '-' or s == '^')
		{
			if (prev == 'v' or prev == ')')
			{
				prev = InputSym(str, j, s, '+');
				continue;
			}
		}
		if (s == '(')
		{
			if (prev == '+' or prev == '_' or prev == '(')
			{
				bracket++;
				o_br = true;
				prev = InputSym(str, j, s, '(');
				continue;
			}
		}
		if (s == ')' and o_br)
		{
			if (prev == 'v' or prev == ')')
			{
				bracket--;
				o_br = false;
				prev = InputSym(str, j, s, ')');
				continue;
			}
		}
	}
	cout << "\n";
}
double RPN_TransCalculation(char* str, char* rez, Stack* top, Stack* &top2)
{
	int j = 0;
	double var;
	bool arrB[26] = { false };
	double arrV[26];
	for (int i = 0; str[i]; i++)
	{
		if ((str[i] >= 'a' and str[i] <= 'z') or (str[i] >= '0' and str[i] <= '9'))
		{
			rez[j++] = str[i];
			var = FindVar(rez[j - 1], arrB, arrV);
			top2 = Add(top2, var);
		}
		else if (str[i] == '(') top = Add(top, str[i]);
		else
		if (str[i] == ')')
		{
			while (top->sym != '(') SignOperation(rez, j, top, top2);
			OutTop(&top);
		}
		else
		{
			while (true)
			{

				if (top and Prior(top->sym) >= Prior(str[i])) SignOperation(rez, j, top, top2);
				else
				{
					top = Add(top, str[i]);
					break;
				}
			}
		}
	}
	while (top) SignOperation(rez, j, top, top2);
	return top2->info;
}